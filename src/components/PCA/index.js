import { getFilteredData } from '../../utils/stateManager'
import { applyPCA } from './PCA'
import { renderPCA } from './renderPCA'

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É PCA –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (Genre –∞–±–æ Platform).
 * –û–±—á–∏—Å–ª—é—î—Ç—å—Å—è PCA (—Ä–∞–∑–æ–º —ñ–∑ –¥–≤–æ–º–∞ —Ç–∏–ø–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó) —ñ –≤—ñ–∑—É–∞–ª—ñ–∑—É—é—Ç—å—Å—è –¥–∞–Ω—ñ.
 * @param {String} selectedCategory - 'Genre' –∞–±–æ 'Platform'.
 */
export function updatePCA (selectedCategory) {
  try {
    let rawData = getFilteredData()
    console.log('üìä –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è PCA –ø–µ—Ä–µ–¥ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é:', rawData)

    if (!rawData || rawData.length === 0) {
      console.warn('‚ö† –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è PCA.')
      return
    }

    // **–§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-5 –ø–ª–∞—Ç—Ñ–æ—Ä–º –∞–±–æ –∂–∞–Ω—Ä—ñ–≤**
    const categoryKey = selectedCategory === 'Platform' ? 'Platform' : 'Genre'
    const categoryTotals = {}

    rawData.forEach(d => {
      categoryTotals[d[categoryKey]] = (categoryTotals[d[categoryKey]] || 0) + d.TotalSales
    })

    const topCategories = Object.entries(categoryTotals)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(d => d[0])

    rawData = rawData.filter(d => topCategories.includes(d[categoryKey]))
    console.log('üìä –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è PCA (–¢–æ–ø-5):', rawData)

    // –û–±—á–∏—Å–ª–µ–Ω–Ω—è PCA, PCA-based –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤
    const pcaData = applyPCA(rawData)
    console.log('üìä –î–∞–Ω—ñ –ø—ñ—Å–ª—è PCA —ñ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó:', pcaData)

    // –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è PCA
    renderPCA(pcaData, selectedCategory)
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ PCA:', error)
  }
}
